#!/usr/bin/env node
/* Copyright (c) 2017 Intel Corporation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/**
 * Module dependencies.
 */

var http = require('http');
var https = require('https');
var fs = require('fs');
var args = {};

// Get arguments
// Set protocol, keystone and controller's addresses as global variables
process.argv.forEach((value) => {

    if (value.includes("config_file")) {
        args.config_file = value.split("=").pop();
        global.CONFIG_FILE = args.config_file;
    }
    if (value.includes("protocol")) {
        args.protocol = value.split("=").pop();
        global.PROTOCOL = args.protocol;
    }
    if (value.includes("keystone_addr")) {
        global.KEYSTONE_ADDR = value.split("=").pop();
    }
    if (value.includes("controller_addr")) {
        global.CONTROLLER_ADDR  = value.split("=").pop();
    }
    if (value.includes("keystone_port")) {
        global.KEYSTONE_PORT  = value.split("=").pop();
    }
    if (value.includes("controller_port")) {
        global.CONTROLLER_PORT  = value.split("=").pop();
    }
    if (value.includes("key_path")) {
        args.key_path  = value.split("=").pop();
    }
    if (value.includes("cert_path")) {
        args.cert_path  = value.split("=").pop();
    }
    if (value.includes("passphrase")) {
        args.passphrase  = value.split("=").pop();
    }
});

// require App only after processing parameters
var app = require('../app');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP and HTTPS servers.
 */

var server = null;
var configFile = args.config_file?args.config_file:"./config/ciao_config.json";
// Gather information from configuration file
var fileRead = JSON.parse(fs.readFileSync(configFile));
var uiConfig;
if (fileRead[process.env.NODE_ENV])
    uiConfig = fileRead[process.env.NODE_ENV].ui;
else
    uiConfig = {certificates:{}};

// Overwrite ui config values if parameters were set
if (args.protocol)
    uiConfig.protocol = args.protocol;
if (args.key_path)
    uiConfig.certificates.key = args.key_path;
if (args.cert_path)
    uiConfig.certificates.cert = args.cert_path;
if (args.passphrase)
    uiConfig.certificates.passphrase = args.passphrase;

// Use protocol specified in arguments, if  protocol was
// not specified as an argument use app_config file
var protocol = uiConfig.protocol;
var keyFile = uiConfig.certificates.key;
var certFile = uiConfig.certificates.cert;
var passphrase = uiConfig.certificates.passphrase;

if (protocol == 'http')
    server = require(uiConfig.protocol).createServer(credentials,app);
else if (fs.existsSync(keyFile) && fs.existsSync(certFile)) {
    var pkey = fs.readFileSync(keyFile, 'utf8');
    var pcert = fs.readFileSync(certFile, 'utf8');
    app.key = pkey;
    app.cert = pcert;
    var credentials = {key: pkey, cert: pcert,passphrase: passphrase};

    server = require(uiConfig.protocol).createServer(credentials,app);
} else {
    console.log("Error setting up https server, please check ciao_config.json");
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
}
